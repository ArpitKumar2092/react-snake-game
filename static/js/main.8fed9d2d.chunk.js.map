{"version":3,"sources":["component/board.js","App.js","serviceWorker.js","index.js"],"names":["Board","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","DrawTr","td","id","react_default","a","createElement","key","DrawTd","ids","tdClassName","DrawFood","DrawSnake","state","snake","length","join","className","DrawCanvas","Cord","Draw","Tr","i","Board_Height","j","Board_Width","push","IncreaseLevel","level","NewSpeed","Speed","console","log","clearTimeout","moveSnakeInterval","setInterval","moveSnake","DetectCollision","SnakeHead","map","val","indexOf","HandleGameOver","alert","status","GameStop","food","Direction","bind","assertThisInitialized","GameStart","HandleKey","GenerateNewFood","height","width","score","EatSound","Audio","CollisionSound","cord","play","x","y","Math","floor","random","e","setState","_this2","Tail","IfFoodEat","NewSnake","_this$state","Snake","pop","CheckFoodEat","apply","slice","s","NewDir","_ref","keyCode","el","focus","_this3","cellSpacing","onKeyDown","tabIndex","ref","onClick","React","Component","App","board","Boolean","window","location","hostname","match","ReactDOM","render","src_App","size","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8fed9d2d.chunk.js","sourcesContent":["import React from 'react';\r\n// import EatSound from '../assets/sound/sound';\r\n\r\nlet TimeOut;\r\n\r\nconst copy = (obj) =>{\r\n    return JSON.parse(JSON.stringify(obj));\r\n}\r\n\r\nclass Board extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            snake: [],\r\n            food: [],\r\n            // 0 = not started, 1 = in progress, 2= finished\r\n            status: 0,\r\n            // using keycodes to indicate direction\r\n            Direction: 'RIGHT'\r\n        };\r\n        this.moveSnake = this.moveSnake.bind(this);\r\n        this.GameStop = this.GameStop.bind(this);\r\n        this.GameStart = this.GameStart.bind(this);\r\n        this.HandleKey = this.HandleKey.bind(this);\r\n        this.GenerateNewFood = this.GenerateNewFood.bind(this);\r\n        \r\n        this.Board_Height = this.props.height;\r\n        this.Board_Width = this.props.width;\r\n        this.Speed = 300;\r\n        this.score = 4;\r\n        this.level = 1;\r\n\r\n        this.EatSound = new Audio('https://freesound.org/data/previews/391/391658_7368738-lq.mp3');\r\n        this.CollisionSound = new Audio('https://d1490khl9dq1ow.cloudfront.net/sfx/mp3preview/jg-032316-sfx-car-crash.mp3');\r\n    }\r\n\r\n    DrawTr = (td, id) => {\r\n        return (<tr key={id}>{td}</tr>);\r\n    }\r\n\r\n    DrawTd = (ids, key) => {\r\n        let tdClassName = '';\r\n        if(this.DrawFood(ids)){\r\n            tdClassName = 'FoodBlock' ;\r\n        }\r\n        if(this.DrawSnake(ids)){\r\n            tdClassName = 'snakeBlock';\r\n        }\r\n        if(this.state.snake.length > 0){\r\n            if(this.state.snake[0].join(',') == ids){\r\n                tdClassName = 'snakeHead';\r\n            }\r\n        }\r\n        return (<td id={ids} key={key} className={tdClassName}></td>);\r\n    }\r\n\r\n    DrawFood ( cord ) {\r\n        let  FoodIndex  = this.state.food.join(',');\r\n        if ( FoodIndex == cord ) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    DrawSnake( cord ) {\r\n        let  snakeIndex  = this.state.snake.map( val => { return val.join(',') } );\r\n        if (snakeIndex.indexOf( cord ) > -1) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    DrawCanvas = () => {\r\n        let Draw = [];\r\n        let Cord;\r\n        let Tr = [];\r\n        for (var i = 0; i < this.Board_Height; i++) {\r\n            Tr = [];\r\n            for (var j = 0; j < this.Board_Width; j++) {\r\n                Cord = i + ',' + j;\r\n                Tr.push(this.DrawTd(Cord, Cord));\r\n            }\r\n            Draw.push(this.DrawTr(Tr, i));\r\n        }\r\n        return Draw;\r\n    }\r\n    CheckFoodEat( cord ) {\r\n        if(cord.join(',') == this.state.food.join(',')){\r\n            this.EatSound.play();\r\n            this.GenerateNewFood();\r\n            this.score++;\r\n            if(this.score % 5 == 0){\r\n                this.IncreaseLevel();\r\n            }\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n    IncreaseLevel = () =>{\r\n        this.level++;\r\n        let NewSpeed  = this.Speed - 20;\r\n        console.log(NewSpeed)\r\n        clearTimeout(this.moveSnakeInterval);\r\n        this.moveSnakeInterval = setInterval(this.moveSnake , NewSpeed);\r\n        this.Speed = NewSpeed;\r\n    }\r\n\r\n    GenerateNewFood(){\r\n        let x , y , check;\r\n        while(true){\r\n            x = Math.floor(Math.random() * Math.floor(this.Board_Width));\r\n            y = Math.floor(Math.random() * Math.floor(this.Board_Height));\r\n\r\n            // check if it is not snake\r\n            check = this.state.snake.map(function(e){if(e[0] == x && e[1] == y){return 'found';}}).indexOf('found');\r\n            if(check == -1){\r\n                break;\r\n            }\r\n        }\r\n        \r\n        this.setState({food : [y , x]});\r\n    }\r\n    DetectCollision = (SnakeHead) =>{\r\n        let check = false;\r\n        if(SnakeHead[0] > this.Board_Height - 1 || SnakeHead[1] > this.Board_Width - 1\r\n            || SnakeHead[0] < 0 || SnakeHead[1] < 0 ){\r\n                return true;\r\n            }\r\n\r\n        check = this.state.snake.map((val)=>{return val.join(',')}).indexOf(SnakeHead.join(',')) \r\n        if(check != -1 && this.state.snake.length >  1){\r\n            return true;\r\n        }    \r\n\r\n        \r\n    }\r\n    moveSnake() {\r\n        if(this.status == 0){\r\n            return 0;\r\n        }\r\n        let Cord , Tail , NewSnake = [] , IfFoodEat;\r\n        let { Direction , snake } = this.state;\r\n        let Snake = snake;\r\n\r\n        if(Snake > 1){\r\n            Tail = Snake.pop()\r\n        }\r\n\r\n        Cord = Snake[0];\r\n        IfFoodEat = this.CheckFoodEat(Cord);\r\n    \r\n\r\n        if(Direction === 'RIGHT'){\r\n            NewSnake.push([Cord[0] ,(Cord[1]+1)]);\t\r\n        }\r\n\r\n        if(Direction === 'LEFT'){\r\n            NewSnake.push([Cord[0] ,(Cord[1]-1)]);\t\r\n        }\r\n\r\n        if(Direction === 'UP'){\r\n            NewSnake.push([Cord[0]-1 ,(Cord[1])]);\t\r\n        }\r\n\r\n        if(Direction === 'DOWN'){\r\n            NewSnake.push([Cord[0]+1 ,(Cord[1])]);\t\r\n        }\r\n\r\n        let checkCollision = NewSnake[0];\r\n\r\n        if(this.DetectCollision(NewSnake[0])){\r\n            this.CollisionSound.play();\r\n            this.HandleGameOver()\r\n            return 0;\r\n        }\r\n\r\n        if(this.state.snake.length > 1){\r\n            [].push.apply(\r\n                NewSnake,\r\n                this.state.snake.slice(1).map((s, i) => {\r\n                return this.state.snake[i];\r\n                })\r\n            );\r\n\r\n        }\r\n\r\n        if(IfFoodEat){\r\n            if(Tail){\r\n                NewSnake.push(Tail);\r\n            }else{\r\n                NewSnake.push(this.state.food);\r\n            }\r\n        }                      \r\n\r\n        this.setState({ snake: NewSnake });\r\n        }\r\n\r\n        HandleGameOver =  () =>  {\r\n            alert('Game Over');\r\n            this.status = 0;\r\n            this.GameStop ();\r\n        }\r\n\r\n        HandleKey({keyCode}) {\r\n            let NewDir;\r\n            switch (keyCode) {\r\n                case 38:\r\n                    NewDir = 'UP';\r\n                    break;\r\n                case 40:\r\n                    NewDir = 'DOWN';\r\n                    break;\r\n                case 37:\r\n                    NewDir = 'LEFT';\r\n                    break;\r\n                case 39:\r\n                    NewDir = 'RIGHT';\r\n                    break;\r\n                default:\r\n                return 0;    \r\n            }\r\n\r\n            if ((this.state.Direction === 'UP' && NewDir === 'DOWN') || (this.state.Direction === 'DOWN' && NewDir === 'DOWN')) {\r\n                return 0;\r\n            }\r\n\r\n            if ((this.state.Direction === 'DOWN' && NewDir === 'UP') || (this.state.Direction === 'UP' && NewDir === 'UP')) {\r\n                return 0;\r\n            }\r\n            if ((this.state.Direction === 'RIGHT' && NewDir === 'LEFT') || (this.state.Direction === 'LEFT' && NewDir === 'LEFT')) {\r\n                return 0;\r\n            }\r\n            if ((this.state.Direction === 'LEFT' && NewDir === 'RIGHT') || (this.state.Direction === 'RIGHT' && NewDir === 'RIGHT')) {\r\n                return 0;\r\n            }\r\n            this.setState({ Direction:NewDir }) \r\n        }\r\n\r\n    GameStart () {\r\n        this.moveSnakeInterval = setInterval(this.moveSnake , this.Speed);\r\n        this.setState({\r\n            snake: [[0, 0]],\r\n            food: [0, 1],\r\n            Direction : 'RIGHT',\r\n        });\r\n        this.status = 1;\r\n        this.Speed = 300;\r\n        this.score = 0;\r\n        this.level = 1;\r\n        //need to focus so keydown listener will work!\r\n        this.el.focus();\r\n        }\r\n\r\n    GameStop (){\r\n        clearTimeout(this.moveSnakeInterval);\r\n    }\r\n        \r\n    render() {\r\n        return (\r\n                <div className=\"Center\">\r\n            <h1>Level : {this.level} || Score : {this.score}</h1>\r\n            <table cellSpacing=\"0\" className=\"Center\" onKeyDown={this.HandleKey} tabIndex=\"0\" ref={el => (this.el = el)}>\r\n                <tbody>\r\n                    {this.DrawCanvas()}\r\n                </tbody>\r\n            </table>\r\n            <button className=\"btn btn-primary\" onClick={this.GameStart}>Start</button>\r\n            <button className=\"btn btn-primary\" onClick={this.GameStop}>Stop</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board;","import React from 'react';\nimport './App.css';\nimport Board from './component/board'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <div id=\"GameArea\">\n      <Board height=\"20\" width=\"20\"/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App size={350}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}